package com.tienda.a_shop.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.tienda.a_shop.entities.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ITEM".
*/
public class ItemDao extends AbstractDao<Item, Long> {

    public static final String TABLENAME = "ITEM";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CategoriaXGastoMesId = new Property(1, Long.class, "categoriaXGastoMesId", false, "CATEGORIA_XGASTO_MES_ID");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Valor = new Property(3, int.class, "valor", false, "VALOR");
    }

    private Query<Item> categoriaXGastoMes_ItemsQuery;

    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CATEGORIA_XGASTO_MES_ID\" INTEGER," + // 1: categoriaXGastoMesId
                "\"NOMBRE\" TEXT," + // 2: nombre
                "\"VALOR\" INTEGER NOT NULL );"); // 3: valor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long categoriaXGastoMesId = entity.getCategoriaXGastoMesId();
        if (categoriaXGastoMesId != null) {
            stmt.bindLong(2, categoriaXGastoMesId);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
        stmt.bindLong(4, entity.getValor());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long categoriaXGastoMesId = entity.getCategoriaXGastoMesId();
        if (categoriaXGastoMesId != null) {
            stmt.bindLong(2, categoriaXGastoMesId);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
        stmt.bindLong(4, entity.getValor());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // categoriaXGastoMesId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.getInt(offset + 3) // valor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoriaXGastoMesId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValor(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Item entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Item entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Item entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of CategoriaXGastoMes. */
    public List<Item> _queryCategoriaXGastoMes_Items(Long categoriaXGastoMesId) {
        synchronized (this) {
            if (categoriaXGastoMes_ItemsQuery == null) {
                QueryBuilder<Item> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoriaXGastoMesId.eq(null));
                queryBuilder.orderRaw("T.'_id' ASC");
                categoriaXGastoMes_ItemsQuery = queryBuilder.build();
            }
        }
        Query<Item> query = categoriaXGastoMes_ItemsQuery.forCurrentThread();
        query.setParameter(0, categoriaXGastoMesId);
        return query.list();
    }

}
