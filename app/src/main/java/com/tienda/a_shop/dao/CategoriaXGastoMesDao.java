package com.tienda.a_shop.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.tienda.a_shop.entities.Categoria;
import com.tienda.a_shop.entities.GastoMes;

import com.tienda.a_shop.entities.CategoriaXGastoMes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATEGORIA_XGASTO_MES".
*/
public class CategoriaXGastoMesDao extends AbstractDao<CategoriaXGastoMes, Long> {

    public static final String TABLENAME = "CATEGORIA_XGASTO_MES";

    /**
     * Properties of entity CategoriaXGastoMes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Estimado = new Property(1, int.class, "estimado", false, "ESTIMADO");
        public final static Property Total = new Property(2, int.class, "total", false, "TOTAL");
        public final static Property CategoriaId = new Property(3, Long.class, "categoriaId", false, "CATEGORIA_ID");
        public final static Property GastoMesId = new Property(4, Long.class, "gastoMesId", false, "GASTO_MES_ID");
    }

    private DaoSession daoSession;

    private Query<CategoriaXGastoMes> categoria_CategoriaXGastoMesQuery;
    private Query<CategoriaXGastoMes> gastoMes_CategoriaXGastoMesQuery;

    public CategoriaXGastoMesDao(DaoConfig config) {
        super(config);
    }
    
    public CategoriaXGastoMesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATEGORIA_XGASTO_MES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ESTIMADO\" INTEGER NOT NULL ," + // 1: estimado
                "\"TOTAL\" INTEGER NOT NULL ," + // 2: total
                "\"CATEGORIA_ID\" INTEGER," + // 3: categoriaId
                "\"GASTO_MES_ID\" INTEGER);"); // 4: gastoMesId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATEGORIA_XGASTO_MES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CategoriaXGastoMes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEstimado());
        stmt.bindLong(3, entity.getTotal());
 
        Long categoriaId = entity.getCategoriaId();
        if (categoriaId != null) {
            stmt.bindLong(4, categoriaId);
        }
 
        Long gastoMesId = entity.getGastoMesId();
        if (gastoMesId != null) {
            stmt.bindLong(5, gastoMesId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CategoriaXGastoMes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getEstimado());
        stmt.bindLong(3, entity.getTotal());
 
        Long categoriaId = entity.getCategoriaId();
        if (categoriaId != null) {
            stmt.bindLong(4, categoriaId);
        }
 
        Long gastoMesId = entity.getGastoMesId();
        if (gastoMesId != null) {
            stmt.bindLong(5, gastoMesId);
        }
    }

    @Override
    protected final void attachEntity(CategoriaXGastoMes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CategoriaXGastoMes readEntity(Cursor cursor, int offset) {
        CategoriaXGastoMes entity = new CategoriaXGastoMes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // estimado
            cursor.getInt(offset + 2), // total
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // categoriaId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4) // gastoMesId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CategoriaXGastoMes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEstimado(cursor.getInt(offset + 1));
        entity.setTotal(cursor.getInt(offset + 2));
        entity.setCategoriaId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setGastoMesId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CategoriaXGastoMes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CategoriaXGastoMes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CategoriaXGastoMes entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "categoriaXGastoMes" to-many relationship of Categoria. */
    public List<CategoriaXGastoMes> _queryCategoria_CategoriaXGastoMes(Long categoriaId) {
        synchronized (this) {
            if (categoria_CategoriaXGastoMesQuery == null) {
                QueryBuilder<CategoriaXGastoMes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CategoriaId.eq(null));
                categoria_CategoriaXGastoMesQuery = queryBuilder.build();
            }
        }
        Query<CategoriaXGastoMes> query = categoria_CategoriaXGastoMesQuery.forCurrentThread();
        query.setParameter(0, categoriaId);
        return query.list();
    }

    /** Internal query to resolve the "categoriaXGastoMes" to-many relationship of GastoMes. */
    public List<CategoriaXGastoMes> _queryGastoMes_CategoriaXGastoMes(Long gastoMesId) {
        synchronized (this) {
            if (gastoMes_CategoriaXGastoMesQuery == null) {
                QueryBuilder<CategoriaXGastoMes> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.GastoMesId.eq(null));
                gastoMes_CategoriaXGastoMesQuery = queryBuilder.build();
            }
        }
        Query<CategoriaXGastoMes> query = gastoMes_CategoriaXGastoMesQuery.forCurrentThread();
        query.setParameter(0, gastoMesId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategoriaDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getGastoMesDao().getAllColumns());
            builder.append(" FROM CATEGORIA_XGASTO_MES T");
            builder.append(" LEFT JOIN CATEGORIA T0 ON T.\"CATEGORIA_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN GASTO_MES T1 ON T.\"GASTO_MES_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CategoriaXGastoMes loadCurrentDeep(Cursor cursor, boolean lock) {
        CategoriaXGastoMes entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Categoria categoria = loadCurrentOther(daoSession.getCategoriaDao(), cursor, offset);
        entity.setCategoria(categoria);
        offset += daoSession.getCategoriaDao().getAllColumns().length;

        GastoMes gastoMes = loadCurrentOther(daoSession.getGastoMesDao(), cursor, offset);
        entity.setGastoMes(gastoMes);

        return entity;    
    }

    public CategoriaXGastoMes loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CategoriaXGastoMes> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CategoriaXGastoMes> list = new ArrayList<CategoriaXGastoMes>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CategoriaXGastoMes> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CategoriaXGastoMes> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
